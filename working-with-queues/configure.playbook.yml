-
    name: Configure - Get/Remove/Add/Update Queue objects with subscriptions
    hosts: all
    gather_facts: no
    any_errors_fatal: true
    collections:
      - solace.pubsub_plus
    module_defaults:
      solace_get_available:
        host: "{{ sempv2_host }}"
        port: "{{ sempv2_port }}"
        secure_connection: "{{ sempv2_is_secure_connection }}"
        username: "{{ sempv2_username }}"
        password: "{{ sempv2_password }}"
        timeout: "{{ sempv2_timeout }}"
      solace_vpn:
        host: "{{ sempv2_host }}"
        port: "{{ sempv2_port }}"
        secure_connection: "{{ sempv2_is_secure_connection }}"
        username: "{{ sempv2_username }}"
        password: "{{ sempv2_password }}"
        timeout: "{{ sempv2_timeout }}"
      solace_queue:
        host: "{{ sempv2_host }}"
        port: "{{ sempv2_port }}"
        secure_connection: "{{ sempv2_is_secure_connection }}"
        username: "{{ sempv2_username }}"
        password: "{{ sempv2_password }}"
        timeout: "{{ sempv2_timeout }}"
      solace_queue_subscription:
        host: "{{ sempv2_host }}"
        port: "{{ sempv2_port }}"
        secure_connection: "{{ sempv2_is_secure_connection }}"
        username: "{{ sempv2_username }}"
        password: "{{ sempv2_password }}"
        timeout: "{{ sempv2_timeout }}"
    tasks:
      - name: "Check / pause until service available"
        solace_get_available:
        register: _result
        until: "_result.rc == 0 and _result.is_available == True"
        retries: 25 # 25 * 5 seconds
        delay: 5 # Every 5 seconds

      - set_fact:
          vpn_name: foo

      - name: Create a new VPN
        solace_vpn:
          name: "{{ vpn_name }}"
          settings:
            enabled: true
            dmrEnabled: false

      - include_vars:
          file: queues.vars.yml
          name: target_queue_list

      - name: Adding / updating queues
        include_tasks: ./tasks/queue.tasks.yml
        register: result
        loop: "{{ target_queue_list.queues }}"
        loop_control:
          loop_var: queue_item

      - name: Prompt to check Broker console
        pause:
          prompt: "{{ item }}"
          seconds: "{{ 1 if AUTO_RUN else omit }}"
        with_items: |
            "Check the queues created on the broker console."
            "  http://localhost:8080 (admin/admin)"
            "   vpn: {{ vpn_name }}"
            "Press ENTER to delete queues again or CTRL+C and A to abort..."

      - name: Deleting queues
        solace_queue:
          name: "{{ item.name }}"
          msg_vpn: "{{ vpn_name }}"
          state: absent
        loop: "{{ target_queue_list.queues }}"

      - name: Delete VPN
        solace_vpn:
          name: "{{ vpn_name }}"
          state: absent
