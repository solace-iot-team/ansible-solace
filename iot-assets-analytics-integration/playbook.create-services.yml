-
  name: Create Services Playbook
  hosts: localhost
  gather_facts: no
  any_errors_fatal: true
  collections:
    - solace.pubsub_plus
  pre_tasks:
    - include_vars:
        file: "solace-cloud-service.vars.yml"
        name: sc_service
  tasks:
    - name: "Check vars"
      assert:
        that:
          - sc_service is defined
          - SOLACE_CLOUD_API_TOKEN is defined and SOLACE_CLOUD_API_TOKEN | length > 0
          - WORKING_DIR is defined
        fail_msg: "one or more variables not defined"

    - name: "Create Solace Cloud Service"
      solace_cloud_service:
        api_token: "{{ SOLACE_CLOUD_API_TOKEN }}"
        name: "{{ sc_service.name }}"
        settings:
          msgVpnName: "{{ sc_service.msgVpnName}}"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId}}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
          attributes: "{{ sc_service.attributes | default(omit) }}"
        state: present
      register: result

    - set_fact:
        sc_service_id: "{{ result.response.serviceId }}"

    - name: "Wait for Service Provisioning to Complete"
      solace_cloud_get_service:
        api_token: "{{ SOLACE_CLOUD_API_TOKEN }}"
        service_id: "{{ sc_service_id }}"
      register: result
      until: "result.rc != 0 or result.response.creationState == 'completed'"
      retries: 40
      delay: 60

    - set_fact:
        sc_service_info: "{{ result.response }}"
        sc_trust_store_uri: "{{ result.response.msgVpnAttributes.truststoreUri }}"

    - name: "Get Solace Cloud Service Inventory"
      solace_cloud_get_facts:
        from_dict: "{{ sc_service_info }}"
        get_formattedHostInventory:
          host_entry: "{{ sc_service.name }}"
          api_token: "{{ SOLACE_CLOUD_API_TOKEN }}"
          meta:
            service_name: "{{ sc_service_info.name }}"
            sc_service_id: "{{ sc_service_info.serviceId }}"
            datacenterId: "{{ sc_service_info.datacenterId }}"
            serviceTypeId: "{{ sc_service_info.serviceTypeId}}"
            serviceClassId: "{{ sc_service_info.serviceClassId }}"
            serviceClassDisplayedAttributes: "{{ sc_service_info.serviceClassDisplayedAttributes }}"
      register: result

    - name: "Save Solace Cloud Service Inventory to File"
      copy:
        content: "{{ result.facts.formattedHostInventory | to_nice_yaml }}"
        dest: "{{ WORKING_DIR }}/edge-broker.inventory.yml"
      changed_when: false
      delegate_to: localhost

    - name: "Download Certificate"
      get_url:
        url: "{{ sc_trust_store_uri }}"
        dest: "{{ WORKING_DIR }}/edge-broker.pem"

    - name: "Local Broker Setup"
      include_role:
        name: solace.pubsub_plus.solace_broker_service
      vars:
        service_type: docker_single_node
        project_name: central-broker
        generated_inventory_file: "{{ WORKING_DIR }}/central-broker.inventory.yml"
