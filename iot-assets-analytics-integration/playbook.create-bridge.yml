-
  name: "Create Bridge: Edge to Central"
  hosts: all
  gather_facts: no
  any_errors_fatal: true
  collections:
    - solace.pubsub_plus
  module_defaults:
    solace_get_available:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
    solace_gather_facts:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
    solace_client_profile:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
    solace_acl_profile:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_client_username:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_queue:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_queue_subscription:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_bridge:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_bridge_trusted_cn:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_bridge_remote_vpn:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_get_bridges:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_get_bridge_remote_vpns:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace_cert_authority:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
  pre_tasks:
    - include_vars:
        file: "bridge.vars.yml"
        name: bridge
  tasks:
    - name: "Check vars"
      assert:
        that:
          - SOLACE_CLOUD_API_TOKEN is defined and SOLACE_CLOUD_API_TOKEN | length > 0
          - WORKING_DIR is defined
        fail_msg: "one or more variables not defined"

    - name: ensure WORKING_DIR exists
      file:
        path: "{{ WORKING_DIR }}"
        state: directory

    - name: "Gather Solace Facts"
      solace_gather_facts:
      register: result
      # no_log: true
      # ignore_errors: true

    # Prepare the central-broker:
    # - upload the solace-cloud certificate
    - set_fact:
        pem_file: "{{ WORKING_DIR }}/edge-broker.pem"
    - name: "Upload Solace Cloud Certificate to Central-Broker"
      solace_cert_authority:
        name: "{{ bridge.short_name }}"
        settings:
          certContent: "{{ lookup('file', pem_file) }}"
        state: present
      when: inventory_hostname == "central-broker"

    - name: "Bridge: Client Profile"
      solace_client_profile:
        name: "{{ bridge.short_name }}"
        settings:
          allowBridgeConnectionsEnabled: true
          allowGuaranteedMsgSendEnabled: true
          allowGuaranteedMsgReceiveEnabled: true
          maxEndpointCountPerClientUsername: 1
        state: present

    - name: "Bridge: ACL Profile"
      solace_acl_profile:
        name: "{{ bridge.short_name }}"
        settings:
          clientConnectDefaultAction: "allow"
          publishTopicDefaultAction: "allow"
          subscribeTopicDefaultAction: "allow"
        state: present

    # Note: If it exists already, API does not allow to update certain
    #       settings. It must be disabled first.
    - name: "Bridge: Disable Client Username"
      solace_client_username:
        name: "{{ bridge.name }}"
        settings:
          enabled: false
        state: present

    - name: "Bridge: Client Username"
      solace_client_username:
        name: "{{ bridge.name }}"
        settings:
          enabled: true
          password: "{{ bridge.name }}"
          aclProfileName: "{{ bridge.short_name }}"
          clientProfileName: "{{ bridge.short_name }}"
        state: present

    - name: "Bridge: Queue"
      solace_queue:
        name: "{{ bridge.name }}"
        settings:
          owner: "{{ bridge.name }}"
          permission: consume
          egressEnabled: true
          ingressEnabled: true
        state: present

    - name: "Bridge: Queue Subscription"
      solace_queue_subscription:
        queue_name: "{{ bridge.name }}"
        topic: "{{ bridge.subscr_topic }}"
        state: present

    # Note:
    # A previously created bridge to the local broker (central-broker)
    # will have the remote vpn with that local broker's virtual router.
    # When re-starting the local broker, the virtual router changes.
    # Adding the new remote vpn will result in a 'hanging' remote vpn.
    # Deleting the bridge first ensures that bridge is set-up completely clean.
    - name: "Bridge: Ensure Bridge does not exist"
      solace_bridge:
        name: "{{ bridge.name }}"
        state: absent

    - name: "Bridge: Bridge"
      solace_bridge:
        name: "{{ bridge.name }}"
        virtual_router: auto
        settings:
          enabled: false
          remoteAuthenticationBasicClientUsername: "{{ bridge.name }}"
          remoteAuthenticationBasicPassword: "{{ bridge.name }}"
          remoteAuthenticationScheme: basic
        state: present

    - name: "Bridge: Trusted Common Name"
      solace_bridge_trusted_cn:
        name: "*.messaging.solace.cloud"
        bridge_name: "{{ bridge.name }}"
        virtual_router: auto
        state: present

    - name: "Bridge: Get Remote Host Bridge Facts"
      solace_get_facts:
        hostvars: "{{ hostvars }}"
        hostvars_inventory_hostname: "{{ bridge.hosts[inventory_hostname].remote_host }}"
        get_functions:
          - get_vpnBridgeRemoteMsgVpnLocations
      register: bridge_remote_msg_vpn_locations

    - name: "Bridge: Save Bridge Remote VPN Locations Facts to File"
      local_action:
        module: copy
        content: "{{ bridge_remote_msg_vpn_locations.facts | to_nice_json }}"
        dest: "./tmp/facts.{{ inventory_hostname }}.bridge-remote-vpn-locations.json"
      changed_when: false

    - name: "Bridge: Remote Message VPN"
      solace_bridge_remote_vpn:
        bridge_name: "{{ bridge.name }}"
        bridge_virtual_router: auto
        remote_msg_vpn_name: "{{ bridge.hosts[inventory_hostname].remote_vpn }}"
        # choose the correct remote location depending on settings.tlsEnabled and settings.compressedDataEnabled
        # see ./tmp/facts.{broker}.bridge-remote-vpn-locations.json
        remote_vpn_location: "{{ bridge_remote_msg_vpn_locations.facts.vpnBridgeRemoteMsgVpnLocations.secured }}"
        settings:
          enabled: true
          tlsEnabled: true
          compressedDataEnabled: false
          queueBinding: "{{ bridge.name }}"
        state: present

    - name: "Bridge: Enable"
      solace_bridge:
        name: "{{ bridge.name }}"
        settings:
          enabled: true
        state: present

    - name: "Bridge: Get Status Remote VPN"
      solace_get_bridge_remote_vpns:
        bridge_name: "{{ bridge.name }}"
        api: monitor
        query_params:
          where:
          select:
            - bridgeName
            - remoteMsgVpnLocation
            - enabled
            - up
            - lastConnectionFailureReason
            - compressedDataEnabled
            - tlsEnabled
      register: bridge_remote_vpn_monitor_list
      # it takes a bit of time to establish the connection
      # don't fail immediately
      until:
        - bridge_remote_vpn_monitor_list.result_list[0].data.up
      retries: 3
      delay: 2
      ignore_errors: yes
      no_log: true

    - name: "Bridge: Assert Remote VPN Up"
      fail:
        msg:
          - "ERROR: Bridge Remote VPN not up."
          - "remote vpn info:"
          - "{{ bridge_remote_vpn_monitor_list.result_list[0] }}"
      when: bridge_remote_vpn_monitor_list.result_list[0].data.up == false

    - name: "Bridge: Check & Retry is UP"
      solace_get_bridges:
        api: monitor
        query_params:
          where:
            - "bridgeName=={{ bridge.name }}"
          select:
            - inboundState
            - inboundFailureReason
            - outboundState
      register: result
      until:
        - result.result_list[0].data.inboundState == 'ready-in-sync'
        - result.result_list[0].data.outboundState == 'ready'
      retries: 3
      delay: 2
      ignore_errors: yes

    - name: "Bridge: Assert Bridge Up"
      fail:
        msg:
          - "ERROR: bridge not up."
          - "inboundState: {{ result.result_list[0].data.inboundState }}"
          - "inboundFailureReason: {{ result.result_list[0].data.inboundFailureReason | default('') }}"
          - "outboundState: {{ result.result_list[0].data.outboundState | default('') }}"
      when: >
        result.result_list[0].data.inboundState != 'ready-in-sync' or
        result.result_list[0].data.outboundState != 'ready'


###
# The End.
